<?php

namespace App\Http\Controllers;

use App\Models\DataMesin;
use App\Models\Workshop;
use App\Models\KlasMesin;
use App\Models\DataKategori;
use App\Models\KategoriMesin;
use App\Models\NoRegistrasi;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Barryvdh\DomPDF\Facade\Pdf;
use Illuminate\Support\Facades\DB;
use App\Models\Klasifikasi;
use App\Models\Kategori;

class DataMesinController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $dataMesin = DataMesin::orderBy('kodeJenis', 'asc')->get();
        $post = DataMesin::orderBy('kodeJenis', 'asc')->paginate(100);

        return view('mesin.index', [
            'datamesin' => $dataMesin,
            'post' => $post
        ]);
    }


    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        // Mengambil ID terbaru dari database
        $latestJenis = DataMesin::latest()->first();

        if ($latestJenis) {
            $latestID = $latestJenis->id; // Mengambil ID terbaru
            $newID = $latestID + 1;
            $newKode = str_pad($newID, 3, '0', STR_PAD_LEFT);
        } else {
            $newKode = '001'; // Jika belum ada data
        }

        return view('mesin.create', [
            'kodeJenis' => $newKode,
            // Sertakan data lain yang Anda perlukan di tampilan di sini
            'users' => User::all(),
            'workshop' => Workshop::all(),
            'noregistrasi' => NoRegistrasi::all(),
            'kategorimesin' => KategoriMesin::all(),
            'kategori' => Kategori::all(),
            'klasmesin' => KlasMesin::all(),
        ]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $tes = $request->validate([
            'nama_mesin' => 'required',
            'tahun_mesin' => 'required',
            'nama_kategori' => 'required',
            'nama_klasifikasi' => 'required',
            'kode_kategori' => 'required',
            'kode_klasifikasi' => 'required',
            'klas_mesin' => 'required',
            'kode_jenis' => 'required',
            'type_mesin' => 'required',
            'merk_mesin' => 'required',
            'spek_min' => 'required',
            'spek_max' => 'required',
            'lok_ws' => 'required',
            'kapasitas' => 'required',
            'pabrik' => 'required',

        ]);
        if ($request->file('gambar_mesin')) {
            $tes['gambar_mesin'] = $request->file('gambar_mesin')->store('datamesin', 'public');
        }

        // Buat entitas Jenis dan isi input lainnya
        $jenis = new DataMesin([
            // Isi input lainnya
        ]);


        DataMesin::create($tes);
        return redirect('/data-mesin')
            ->with('success', 'Data Mesin Berhasil Ditambahkan');
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $tes = DataMesin::where('id', $id)->first();
        return view('mesin.detail', [
            'datamesin' => $tes,
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $tes = DataMesin::where('id', $id)->first();
        return view('mesin.edit', [
            'datamesin' => $tes,
            'users' => User::all(),
            'kategorimesin' => KategoriMesin::all(),
            'klasmesin' => KlasMesin::all(),
            'workshop' => Workshop::all()

        ]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $rules = [
            'klas_mesin' => 'required',
            'nama_mesin' => 'required',
            'type_mesin' => 'required',
            'merk_mesin' => 'required',
            'gambar_mesin' => '',
            'spek_min' => 'required',
            'spek_max' => 'required',
            'pabrik' => 'required',
            'kapasitas' => '',
            'tahun_mesin' => 'required',
            'lok_ws' => 'required',

        ];

        $validateData = $request->validate($rules);
        if ($request->file('gambar_mesin')) {
            if ($request->oldImage) {
                Storage::delete($request->oldImage);
            }
            $validateData['gambar_mesin'] = $request->file('gambar_mesin')->store('datamesin', 'public');
        }


        DataMesin::where('id', $id)->update($validateData);
        return redirect('/data-mesin')->with('success', 'Mesin Berhasil Diedit!');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        DataMesin::destroy($id);
        return redirect('/data-mesin')->with('success', 'Mesin Berhasil Dihapus!');
    }

    public function cetak_pdf()
    {
        $articles = DataMesin::all();
        $pdf = PDF::loadview('mesin.printpdf', ['datamesin' => $articles]);
        return $pdf->stream();
    }
    public function getKlasifikasi(Request $request)
    {
        $klasifikasi = Klasifikasi::where('kategori_id', $request->kategori_id)->pluck('nama', 'id');
        return response()->json($klasifikasi);
    }
    public function getLatestID(Request $request)
    {
        $latestID = DataMesin::latest()->value('id');
        return response()->json(['latestID' => $latestID]);
    }
}
